# create a macro for the name of the camera config file for this data set
# so that the same file can be referenced in multiple places including
# in the default MAP-Tk config files
default_camera_config := virat_camera_intrinsics.conf

# include the default camera intrinsics
block base_camera
  include $LOCAL{default_camera_config}
endblock

# include bundle adjustment parameters
block bundle_adjuster
  include hierarchical_bundle_adjuster.conf
endblock

# Sub-sample the cameras for by this rate.
# Set to 1 to use all cameras, 2 to use every other camera, etc.
camera_sample_rate = 10

# Path to write a file containing filtered feature tracks
filtered_track_file =

# Algorithm to use for 'geo_mapper'.
# Must be one of the following options:
# 	- proj
geo_mapper:type = proj

# Path to the input image list file used to generated the input tracks.
image_list_file = frame_list.txt

# When loading a subset of cameras, should we optimize only the loaded cameras
# or also initialize and optimize the unspecified cameras
initialize_unloaded_cameras = true

# include SfM initializer parameters
block initializer
  include core_initializer.conf
endblock

# A directory containing input KRTD camera files, or a text file containing a
# newline-separated list of KRTD files.
#
# This is optional, leave blank to ignore.
#
# This is mutually exclusive with input_pos_files option for system
# initialization, and shadowed by the input_reference_points_file when using an
# st_estimator.
input_krtd_files =

# A directory containing the input POS files, or a text filecontaining a
# newline-separated list of POS files.
#
# This is optional, leave blank to ignore.
#
# This is mutually exclusive with the input_krtd_files option for system
# initialization, and shadowed by the input_reference_points option when using
# an st_estimator.
input_pos_files =

# File containing reference points to use for reprojection of results into the
# geographic coordinate system.
#
# This option is NOT mutually exclusive with input_*_files options when using an
# st_estimator. When both this and another input files option are specified, use
# of the reference file is given priority over the input cameras.
#
# Reference points file format (lm=landmark, tNsM=track N state M):
# 	lm1.x lm1.y lm1.z t1s1.frame t1s1.x t1s1.y t1s2.frame t1s2.x t1s2.y ...
# 	lm2.x lm2.y lm2.z t2s1.frame t2s1.x t2s1.y t2s2.frame t2s2.x t2s2.y ...
# 	...
#
# At least 3 landmarks must be given, with at least 2 track states recorded for
# each landmark, for transformation estimation to converge, however more of each
# is recommended.
#
# Landmark z position, or altitude, should be provided in meters.
input_reference_points_file =

# Path an input file containing feature tracks
input_track_file = results/tracks.txt

# A quaternion used to offset rotation data from POS files when updating
# cameras. This option is only relevent if a value is give to the
# input_pos_files option.
ins:rotation_offset = 0 0 0 1

# Filter the input tracks keeping those covering at least this many frames.
min_track_length = 50

# Apply a Necker reversal to the initial cameras and landmarks
necker_reverse_input = false

# A directory in which to write the output KRTD files.
output_krtd_dir = results/krtd

# Path to the output PLY file in which to write resulting 3D landmark points
output_ply_file = results/landmarks.ply

# A directory in which to write the output POS files.
output_pos_dir = results/pos

# Algorithm to use for 'st_estimator'.
# Must be one of the following options:
# 	- vxl
st_estimator:type = vxl

# config file for the canonical transform
block can_tfm_estimator
  include core_pca_canonical_tfm.conf
endblock

# Use the homogeneous method for triangulating points. The homogeneous method
# can triangulate points at or near infinity and discard them.
triangulator:core:homogeneous = false

# Algorithm to use for 'triangulator'.
# Must be one of the following options:
# 	- core
# 	- vxl
triangulator:type = core
