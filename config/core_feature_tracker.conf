# Algorithm to use for 'feature_tracker', which is of type 'track_features'.
# Must be one of the following options:
# 	- core
type = core

block core

  block feature_detector
    # Algorithm to use for 'feature_detector'.
    # Must be one of the following options:
    # 	- ocv_BRISK :: OpenCV BRISK feature detector and extractor implementation
    # 	- ocv_FAST :: OpenCV feature detection via the FAST algorithm
    # 	- ocv_GFTT :: OpenCV feature detection via the GFTT algorithm
    # 	- ocv_MSER :: OpenCV feature detection via the MSER algorithm
    # 	- ocv_ORB :: OpenCV ORB feature detector and extractor implementation
    # 	- ocv_SIFT :: OpenCV SIFT feature detector and extractor implementation
    # 	- ocv_STAR :: OpenCV feature-point detection via the Star algorithm
    # 	- ocv_SURF :: OpenCV SURF feature detector and extractor implementation
    # 	- ocv_simple_blob :: OpenCV feature detection via the simple_blob algorithm
    type = ocv_SURF


    # Extended descriptor flag (true - use extended 128-element descriptors; false -
    # use 64-element descriptors).
    ocv_SURF:extended = false

    # Threshold for hessian keypoint detector used in SURF
    ocv_SURF:hessian_threshold = 1000

    # Number of octave layers within each octave.
    ocv_SURF:n_octave_layers = 3

    # Number of pyramid octaves the keypoint detector will use.
    ocv_SURF:n_octaves = 4

    # Up-right or rotated features flag (true - do not compute orientation of
    # features; false - compute orientation).
    ocv_SURF:upright = true

  endblock # feature_detector


  block descriptor_extractor
    # Algorithm to use for 'descriptor_extractor'.
    # Must be one of the following options:
    # 	- ocv_BRIEF :: OpenCV feature-point descriptor extraction via the BRIEF
    # algorithm
    # 	- ocv_BRISK :: OpenCV BRISK feature detector and extractor implementation
    # 	- ocv_FREAK :: OpenCV feature-point descriptor extraction via the FREAK
    # algorithm
    # 	- ocv_ORB :: OpenCV ORB feature detector and extractor implementation
    # 	- ocv_SIFT :: OpenCV SIFT feature detector and extractor implementation
    # 	- ocv_SURF :: OpenCV SURF feature detector and extractor implementation
    type = ocv_SURF


    # Extended descriptor flag (true - use extended 128-element descriptors; false -
    # use 64-element descriptors).
    ocv_SURF:extended = false

    # Threshold for hessian keypoint detector used in SURF
    ocv_SURF:hessian_threshold = 1000

    # Number of octave layers within each octave.
    ocv_SURF:n_octave_layers = 3

    # Number of pyramid octaves the keypoint detector will use.
    ocv_SURF:n_octaves = 4

    # Up-right or rotated features flag (true - do not compute orientation of
    # features; false - compute orientation).
    ocv_SURF:upright = true

  endblock # descriptor_extractor


  block feature_matcher
    # Algorithm to use for 'feature_matcher', which is of type 'match_features'.
    # Must be one of the following options:
    # 	- homography_guided
    # 	- ocv
    # 	- vxl_constrained
    type = homography_guided

    # Algorithm to use for 'feature_matcher1'.
    # Must be one of the following options:
    # 	- homography_guided
    # 	- ocv_brute_force :: OpenCV brute-force feature matching algorithm
    # 	- ocv_flann_based :: OpenCV flann-based feature matching algorithm
    # 	- vxl_constrained
    homography_guided:feature_matcher1:type = ocv_flann_based

    # If cross-check filtering should be performed.
    homography_guided:feature_matcher1:ocv_flann_based:cross_check = true

    # Number of neighbors to use when cross checking
    homography_guided:feature_matcher1:ocv_flann_based:cross_check_k = 1


    # Algorithm to use for 'feature_matcher2'.
    # Must be one of the following options:
    # 	- homography_guided
    # 	- ocv_brute_force :: OpenCV brute-force feature matching algorithm
    # 	- ocv_flann_based :: OpenCV flann-based feature matching algorithm
    # 	- vxl_constrained
    homography_guided:feature_matcher2:type =

    # Algorithm to use for 'filter_features', which is of type 'filter_features'.
    # Must be one of the following options:
    # 	- magnitude
    homography_guided:filter_features:type =

    # Algorithm to use for 'homography_estimator', which is of type
    # 'estimate_homography'.
    # Must be one of the following options:
    # 	- ocv
    # 	- vxl
    homography_guided:homography_estimator:type = vxl

    # The acceptable error distance (in pixels) between warped and measured points
    # to be considered an inlier match.
    homography_guided:inlier_scale = 10

    # The minimum required inlier point count. If there are less than this many
    # inliers, no matches will be output.
    homography_guided:min_required_inlier_count = 0

    # The minimum required percentage of inlier points. If the percentage of points
    # considered inliers is less than this amount, no matches will be output.
    homography_guided:min_required_inlier_percent = 0
  endblock # feature_matcher


  block loop_closer
    # Algorithm to use for 'loop_closer', which is of type 'close_loops'.
    # Must be one of the following options:
    # 	- bad_frames_only :: Attempts short-term loop closure based on percentage of
    # feature points tracked.
    # 	- multi_method :: Iteratively run multiple loop closure algorithms
    # 	- vxl_homography_guided
    type = multi_method

    # Number of close loops methods we want to use.
    multi_method:count = 2

    block multi_method:method1
      include loop_closer_bad_frames.conf
    endblock

    block multi_method:method2
      include loop_closer_homography.conf
    endblock
  endblock # loop_closer

endblock # core
